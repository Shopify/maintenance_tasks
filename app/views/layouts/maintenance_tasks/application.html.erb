<!DOCTYPE html>
<html lang="<%= I18n.locale %>">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>
      <% if content_for?(:page_title) %>
        <%= content_for :page_title %> -
      <% end %>

      Maintenance Tasks
    </title>

    <%= csrf_meta_tags %>

    <%=
      stylesheet_link_tag(URI.join(controller.class::BULMA_CDN, 'npm/bulma@1.0.3/css/versions/bulma-no-dark-mode.min.css'),
        media: :all,
        integrity: 'Mzv683sNGpHoqzflgja8HtOOXwSkg0WYgbi6iV3IjnOLZAsGNzzkdXxfHmJYT5dY',
        crossorigin: 'anonymous') unless request.xhr?
    %>

    <style>
      .ruby-comment { color: #6a737d;}
      .ruby-const { color: #e36209; }
      .ruby-embexpr-beg, .ruby-embexpr-end, .ruby-period { color: #24292e; }
      .ruby-ident, .ruby-symbeg { color: #6f42c1; }
      .ruby-ivar, .ruby-cvar, .ruby-gvar, .ruby-int, .ruby-imaginary, .ruby-float, .ruby-rational { color: #005cc5; }
      .ruby-kw { color: #d73a49; }
      .ruby-label, .ruby-tstring-beg, .ruby-tstring-content, .ruby-tstring-end { color: #032f62; }

      .select, select { width: 100%; }
      summary { cursor: pointer; }
      input[type="datetime-local"], input[type="date"], input[type="time"] {
        width: fit-content;
      }
	  details > summary {
        list-style: none;
      }
      summary::-webkit-details-marker {
        display: none
      }
      summary::before {
        content: '► ';
        position:absolute;
        font-size: 16px
      }
      details[open] summary:before {
        content: "▼ ";
      }

      .box {
        box-shadow: 0 4px 6px -1px #0000001a,
                    0 2px 4px -2px #0000001a;
      }
      .label.is-required:after {
        content: " (required)";
        color: #ff6685;
        font-size: 12px;
      }
    </style>

    <script>
      function refresh() {
        const target = document.querySelector("[data-refresh]");
        
        if (!target || !target.dataset.refresh) {
          return;
        } 

        window.setTimeout(() => {
          document.body.style.cursor = "wait";
          fetch(document.location, {
            headers: {
              "X-Requested-With": "XMLHttpRequest",
            },
          }).then(
            async (response) => {
              const text = await response.text();
              const newDocument = new DOMParser().parseFromString(text, "text/html");
              const newTarget = newDocument.querySelector("[data-refresh]");
              if (newTarget) {
                target.replaceWith(newTarget);
              }
              document.body.style.cursor = "";
              refresh();
            },
            (error) => location.reload(),
          );
        }, 3000);
      }

      // Function to add click listeners to all duplicate buttons
      function initializeDuplicateButtons() {
        const duplicateButtons = document.querySelectorAll(
          "button[data-button-duplicate-id]",
        );

        // Add click listener to each button
        duplicateButtons.forEach((button) => {
          button.addEventListener("click", function (event) {
            // Prevent default button behavior
            event.preventDefault();

            const runId = this.getAttribute("data-button-duplicate-id");

            if (runId) {
              // Call the duplicate arguments function
              duplicateArguments(runId);
            }
          });
        });
      }

      function duplicateArguments(runId) {
        if (runId === undefined) {
          return;
        }

        const rows = document.querySelectorAll(
          `.arguments-container-${runId} div.cell`,
        );

        // Iterate through each row
        rows.forEach((row) => {
          // Get the field name from the first cell
          const fieldName = row
            .querySelector("div.is-family-monospace")
            ?.textContent.trim();

          // Get the value from the code element if it exists
          const codeElement = row.querySelector("code");
          const value = codeElement?.textContent.trim() || "";

          if (fieldName) {
            // Try different possible input selectors
            const possibleSelectors = [
              `input[name="task[${fieldName}]"]`,
              `select[name="task[${fieldName}]"]`,
              `textarea[name="task[${fieldName}]"]`,
            ];

            // Find the first matching input element
            const input = possibleSelectors
              .map((selector) => document.querySelector(selector))
              .find((element) => element !== null);

            if (input) {
              // Handle different input types
              switch (input.type) {
                case "hidden":
                case "checkbox":
                  document
                    .querySelectorAll(`input[name="task[${fieldName}]`)
                    .forEach((checkbox) => {
                      checkbox.checked =
                        value === "1" || value.toLowerCase() === "true";
                    });
                  break;

                case "number":
                  // Convert value to number format
                  if (value && !isNaN(value)) {
                    input.value = parseFloat(value);
                  } else {
                    input.value = null;
                  }
                  break;

                case "date":
                  // Convert value to date format
                  if (value && !isNaN(Date.parse(value))) {
                    input.value = new Date(value).toISOString().split("T")[0];
                  } else {
                    input.value = null;
                  }
                  break;
                case "datetime-local":
                  // Convert value to date format
                  if (value && !isNaN(Date.parse(value))) {
                    input.value = new Date(value).toISOString().replace("Z", "");
                  } else {
                    input.value = null;
                  }
                  break;
                default:
                  input.value = value;
              }

              // Trigger change event
              input.dispatchEvent(
                new Event("change", {
                  bubbles: true,
                }),
              );
            }
          }
        });
        scrollToForm();
      }

      function scrollToForm() {
        const form = document.getElementById("form-task");
        if (form) {
          form.scrollIntoView({
            behavior: "smooth",
          });
        }
      }

      // Initialize when DOM is ready
      document.addEventListener("DOMContentLoaded", () => {
        refresh();
        // Set up initial buttons
        initializeDuplicateButtons();
      });
    </script>
  </head>

  <body>
    <%= render 'layouts/maintenance_tasks/navbar' %>

    <section class="section">
      <div class="container">
        <% if notice %>
          <div class="notification is-success"><%= notice %></div>
        <% elsif alert %>
          <div class="notification is-warning"><%= alert %></div>
        <% end %>

        <%= yield %>
      </div>
    </div>
  </body>
</html>
